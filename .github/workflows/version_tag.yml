name: Version Tagging

on:
  push:
    branches:
      - master

jobs:
  version-tag:
    runs-on: ubuntu-latest

    steps:
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Check out the repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Ensure full history is fetched

    - name: Install dependencies
      run: npm install

    - name: Determine new version
      id: new_version
      run: |
        # Debugging: Print all tags and latest tag hash
        echo "All tags:"
        git tag -l
        # Check if there are any tags
        if [ -z "$(git tag)" ]; then
          latest_tag="v1.0.0"
        else
          # Extract the latest tag
          latest_tag_hash=$(git rev-list --tags --max-count=1)
          echo "Latest tag hash: $latest_tag_hash"
          latest_tag=$(git describe --tags $latest_tag_hash)
        fi
        echo "Latest tag: $latest_tag"

        # Ensure the latest tag has three parts
        if [[ $(echo $latest_tag | grep -o '\.' | wc -l) -eq 1 ]]; then
          latest_tag="${latest_tag}.0"
        fi
        echo "Normalized latest tag: $latest_tag"

        # Get the commit message of the latest commit
        commit_message=$(git log -1 --pretty=%B)
        echo "Commit message: $commit_message"

        # Determine the new version based on the commit message
        if [[ $commit_message == *"BREAKING CHANGE"* ]] || [[ $commit_message == feat!* ]] || [[ $commit_message == fix!* ]]; then
          new_version=$(echo $latest_tag | awk -F. -v OFS=. '{$1+=1; $2=0; $3=0; print}')
        elif [[ $commit_message == feat* ]]; then
          new_version=$(echo $latest_tag | awk -F. -v OFS=. '{$2+=1; $3=0; print}')
        elif [[ $commit_message == fix* ]]; then
          new_version=$(echo $latest_tag | awk -F. -v OFS=. '{$3+=1; print}')
        else
          new_version=$latest_tag
        fi

        echo "New version: $new_version"
        echo "{version}={$new_version}" >> $GITHUB_OUTPUT
        echo "{latest_tag}=${latest_tag}" >> $GITHUB_OUTPUT

    - name: Create new version tag
      if: steps.new_version.outputs.version != steps.new_version.outputs.latest_tag
      run: |
        new_version=${{ steps.new_version.outputs.version }}
        git tag $new_version
        git push origin $new_version

    - name: Delete old tags
      run: |
        tags=$(git tag -l | sort -V)
        tags_to_delete=$(echo "$tags" | head -n -3)
        for tag in $tags_to_delete; do
          git tag -d $tag
          git push origin :refs/tags/$tag
        done
